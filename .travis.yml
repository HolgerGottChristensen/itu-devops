os: linux
dist: bionic

# language: python
# python:
#   - 3.7


services:
  - docker  # required, but travis uses older version of docker :(

before_install:
  # Decrypt the git_deploy_key.enc key into /tmp/git_deploy_key
  # - openssl aes-256-cbc -K $encrypted_9571421ba08d_key -iv $encrypted_9571421ba08d_iv -in do_ssh_key.enc -out /tmp/git_deploy_key -d
  - openssl aes-256-cbc -k "$TRAVIS_DEPLOY_KEY" -d -md sha256 -a -in travis_key.enc -out /tmp/git_deploy_key
  # Make sure only the current user can read the private key
  - chmod 600 /tmp/git_deploy_key
  # Create a script to return the passphrase environment variable to ssh-add
  - echo 'echo ${SSH_PASSPHRASE}' > /tmp/askpass && chmod +x /tmp/askpass
  # Start the authentication agent
  - eval "$(ssh-agent -s)"
  # Add the key to the authentication agent
  - export DISPLAY=":0.0"
  - export SSH_ASKPASS="/tmp/askpass"
  - setsid ssh-add /tmp/git_deploy_key
  - echo $RELEASE_PAT > /tmp/gh_token

install:
  - docker --version  # document the version travis is using

stages:
  - docker_build
  # - test
  - push
  - release
  - deploy

jobs:
  include:
    - stage: docker_build
      name: "build and push docker"
      if: env(RELEASE) IS false AND branch = master
      script:
        - echo "LOGIN"
        - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        - echo "BUILD"
        - docker build -t $DOCKER_USERNAME/minitwit-elixir:latest . -f docker/minitwit-elixir/Dockerfile
        # - docker build -t $DOCKER_USERNAME/minitwit-elixir-db:latest . -f docker/db/Dockerfile
        # - docker build -t $DOCKER_USERNAME/mysqlimage:latest . -f Dockerfile-mysql
        # - docker build -t $DOCKER_USERNAME/flagtoolimage:latest . -f Dockerfile-flagtool
        - echo "PUSH"
        - docker push $DOCKER_USERNAME/minitwit-elixir:latest
        # - docker push $DOCKER_USERNAME/minitwit-elixir-db:latest
        # - docker push $DOCKER_USERNAME/mysqlimage:latest
        # - docker push $DOCKER_USERNAME/flagtoolimage:latest

    # - stage: test
    #   name: "run pytest"
    #   install: skip
    #   script:
    #     - docker build -t $DOCKER_USERNAME/minitwittestimage -f Dockerfile-minitwit-tests .
    #     - yesÂ | docker-compose up -d
    #     - docker run -it --rm --network=itu-minitwit-network $DOCKER_USERNAME/minitwittestimage

    - stage: push
      name: "push to branch"
      install: skip
      if: env(RELEASE) IS false AND branch = master
      script:
        - git config --global user.email "travis@travis-ci.org"
        - git config --global user.name "Travis CI"
        - git remote add origin-remote git@github.com:HolgerGottChristensen/itu-devops.git
        - git fetch origin-remote
        - git branch -v -a
        - git switch -c release origin-remote/release
        - git merge --no-ff --no-commit --strategy-option theirs master
        - git diff --quiet && git diff --staged --quiet || git commit -m"Commit for release"
        - git status
        - git push

    - stage: release
      name: "Release"
      install: skip
      if: env(RELEASE) IS true && type NOT IN (push, pull_request)
      script:
        - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        - sudo apt update
        - sudo apt install gh
        - gh auth login --with-token < /tmp/gh_token
        - gh auth status
        - export TAG="$(( $(date +"%U") - 5))"
        - gh release list > /tmp/list
        - cat /tmp/list
        - export SUB="$(grep -c "v0.${TAG}" /tmp/list)"
        - echo "v0.${TAG}.${SUB}"
        - gh release create "v0.${TAG}.${SUB}" --generate-notes --target release


    - stage: deploy
      name: "deploy new version"
      install: skip
      if: env(RELEASE) IS false AND branch = master
      # -o flag to get around "add ip to known hosts prompt"
      # the string at the end means it runs inside the ssh connection
      script:
        - ssh -o "StrictHostKeyChecking no" -i /tmp/git_deploy_key ${MT_USER}@${MT_SERVER} "
          cd ~/docker &&
          git pull &&
          git status &&
          docker-compose pull &&
          docker-compose up -d"