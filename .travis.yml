os: linux
dist: bionic

# language: python
# python:
#   - 3.7

services:
  - docker  # required, but travis uses older version of docker :(

before_install:
  # Decrypt the git_deploy_key.enc key into /tmp/git_deploy_key
  - openssl aes-256-cbc -K $encrypted_9571421ba08d_key -iv $encrypted_9571421ba08d_iv -in do_ssh_key.enc -out /tmp/git_deploy_key -d
  # Make sure only the current user can read the private key
  - chmod 600 /tmp/git_deploy_key
  # Create a script to return the passphrase environment variable to ssh-add
  - echo 'echo ${SSH_PASSPHRASE}' > /tmp/askpass && chmod +x /tmp/askpass
  # Start the authentication agent
  - eval "$(ssh-agent -s)"
  # Add the key to the authentication agent
  - export DISPLAY=":0.0" 
  - export SSH_ASKPASS="/tmp/askpass" 
  - setsid ssh-add /tmp/git_deploy_key

install:
  - docker --version  # document the version travis is using

stages:
  # - docker_build
  # - test
  - push
  # - deploy

jobs:
  include:
#    - stage: docker_build
#      name: "build and push docker"
#      script:
#        - echo "LOGIN"
#        - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
#        - echo "BUILD"
#        - docker build -t $DOCKER_USERNAME/minitwit-elixir:latest . -f docker/minitwit-elixir/Dockerfile
#        # - docker build -t $DOCKER_USERNAME/minitwit-elixir-db:latest . -f docker/db/Dockerfile
#        # - docker build -t $DOCKER_USERNAME/mysqlimage:latest . -f Dockerfile-mysql
#        # - docker build -t $DOCKER_USERNAME/flagtoolimage:latest . -f Dockerfile-flagtool
#        - echo "PUSH"
#        - docker push $DOCKER_USERNAME/minitwit-elixir:latest
#        # - docker push $DOCKER_USERNAME/minitwit-elixir-db:latest
#        # - docker push $DOCKER_USERNAME/mysqlimage:latest
#        # - docker push $DOCKER_USERNAME/flagtoolimage:latest

    # - stage: test
    #   name: "run pytest"
    #   install: skip
    #   script:
    #     - docker build -t $DOCKER_USERNAME/minitwittestimage -f Dockerfile-minitwit-tests .
    #     - yesÂ | docker-compose up -d
    #     - docker run -it --rm --network=itu-minitwit-network $DOCKER_USERNAME/minitwittestimage

    - stage: push
      name: "push to branch"
      install: skip
      script: |
        git config --global user.email "travis@travis-ci.org"
        git config --global user.name "Travis CI"
        git remote add origin-remote git@github.com:HolgerGottChristensen/itu-devops.git
        git fetch origin-remote
        git branch -v -a
        git switch -c release origin-remote/release
        git merge --no-ff --no-commit --strategy-option theirs digitaloceanTest
        git commit -m"Commit for release"
        git status
        git push

#    - stage: deploy
#      name: "deploy new version"
#      install: skip
#      # -o flag to get around "add ip to known hosts prompt"
#      script: |
#        ssh -o "StrictHostKeyChecking no" ${MT_USER}@${MT_SERVER} \
#        "source /root/.bash_profile && \
#        cd /docker && \
#        docker run -p 4000:4000 --env-file=database.config.env --name minitwit-app -d $DOCKER_USERNAME/minitwit-elixir"


