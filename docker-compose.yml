version: "3"

services:
  web:
    image: endritmegusta/minitwit-elixir
    ports:
      - "4000:4000"
    depends_on:
      - prometheus
      - grafana
      - db
      - loki
    networks:
      - default
    environment:
      # Variables to connect to our Postgres server.
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: minitwit_elixir_dev
      PGPORT: 5432
      # Hostname of our Postgres container.
      PGHOST: 157.245.21.206
      # Use the docker mix env
      MIX_ENV: docker
    deploy:
      mode: replicated
      replicas: 5

  test:
    container_name: minitwit-elixir-test
    image: endritmegusta/minitwit-elixir-test
    volumes:
      - .:/test
    depends_on:
      - db
    networks:
      - default
    environment:
      # Variables to connect to our Postgres server.
      PGUSER: postgres
      PGPASSWORD: postgres
      PGDATABASE: minitwit_elixir_test
      PGPORT: 5432
      # Hostname of our Postgres container.
      PGHOST: db
      # Use the docker mix env
      MIX_ENV: test

  loki:
    image: grafana/loki
    container_name: loki
    networks:
      - default
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yaml
      - loki:/loki
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.role==manager" # This makes sure it is run on the manager

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    ports:
      - "9090:9090"
    networks:
      - default
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.role==manager" # This makes sure it is run on the manager

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - default
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.role==manager" # This makes sure it is run on the manager

  db:
    image: postgres
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      # Set a path where Postgres should store the data.
      PGDATA: /var/lib/postgresql/data/pgdata
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - default
    # Things for deployment to docker swarm
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.role==manager" # This makes sure it is run on the manager


  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8888:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints:
          - "node.role==manager" # This makes sure it is run on the manager


# Define the volumes.
volumes:
  pgdata:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/mnt/data-volume/web_pgdata'
  prometheus:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/mnt/data-volume/web_prometheus'
  loki:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/mnt/data-volume/web_loki'
  grafana-storage:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/mnt/data-volume/web_grafana-storage'